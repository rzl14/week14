class Solution {
public:
    // pair<int, vector<int>> ans;
    // int h[20002], e[40002], ne[40002], idx = 0, st[20002];
    // int dfs(int n) {
    //     st[n] = true;
    //     int d = 0;
    //     for (int i = h[n]; i != -1; i = ne[i]) {
    //         if (!st[e[i]]) d = max(d, dfs(e[i]));
    //     }
    //     st[n] = false;
    //     return d + 1;
    // }
    // vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
    //     memset(h, -1, sizeof h);
    //     ans.first = 0x3f3f3f3f;
    //     for (int i = 0; i < edges.size(); i ++) {
    //         int a = edges[i][0], b = edges[i][1];
    //         e[idx] = b, ne[idx] = h[a], h[a] = idx ++;
    //         e[idx] = a, ne[idx] = h[b], h[b] = idx ++;
    //     }
    //     for (int i = 0; i < n; i ++) {
    //         int h = dfs(i);
    //         if (ans.first > h) {
    //             ans.first = h;
    //             ans.second.clear();
    //             ans.second.push_back(i);
    //         }
    //         else if (ans.first == h) ans.second.push_back(i);
    //     }
    //     return ans.second;
    // }

    // int h[20002], e[40002], ne[40002], idx = 0, d[20002], q[20002], hh = 0, tt = -1;
    // bool st[20002];
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n == 1) return {0};
        vector<int> h(n, -1), e(n + n), ne(n + n), d(n), q(n);
        vector<bool> st(n);
        int idx = 0, hh = 0, tt = -1;
        // memset(h, -1, sizeof h);
        // memset(d, 0, sizeof d);
        for (int i = 0; i < edges.size(); i ++) {
            int a = edges[i][0], b = edges[i][1];
            e[idx] = b, ne[idx] = h[a], h[a] = idx ++;
            e[idx] = a, ne[idx] = h[b], h[b] = idx ++;
            d[a] ++, d[b] ++;
        }
        for (int i = 0; i < n; i ++) if (d[i] == 1) q[++ tt] = i;
        while (tt + 1 < n) {
            int sz = tt - hh + 1;
            for (int k = 0; k < sz; k ++) {
                int a = q[hh ++];
                st[a] = true;
                for (int j = h[a]; j != -1; j = ne[j]) {
                    int b = e[j];
                    if (!st[b] && -- d[b] == 1) q[++ tt] = b;
                }
            }
            
        }
        vector<int> ans;
        // for (int i = 0; i <= tt; i ++) cout << q[i] << "  " ;
        // cout << endl << hh << "  " << tt << endl << endl;
        while (hh <= tt) ans.push_back(q[hh ++]);
        return ans;
    }
};