class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        int g[101][101], dist[101], ans = -1;
        bool st[101];
        memset(st, 0, sizeof st);
        memset(dist, 0x3f, sizeof dist);
        memset(g, 0x3f, sizeof g);
        for (int i = 0; i < times.size(); i ++)
            g[times[i][0]][times[i][1]] = times[i][2];
        dist[k] = 0;
        for (int i = 0; i < n; i ++) {
            int t = -1;
            for (int j = 1; j <= n; j ++)
                if (!st[j] && (t == -1 || dist[t] > dist[j])) t = j;
            ans = dist[t];
            st[t] = true;
            for (int j = 1; j <= n; j ++)
                dist[j] = min(dist[j], dist[t] + g[t][j]);
        }
        return ans >= 0x3f3f3f3f ? -1 : ans;
    }
};
/* 朴素版Dijkstra
    dist[1] = 0, dist[>1] = 0x3f3f3f3f
    for (i : 0 ~ n) {
        t ： 找到不在s中的距离最近的点
        t加到s中
        用t更新到其它点的距离
    }
*/